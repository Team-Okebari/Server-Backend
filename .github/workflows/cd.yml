name: Artbite Backend CD

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0





      # 2. EC2에 필요한 파일 전송
      - name: Copy deployment files to EC2
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: docker-compose.yml, infra/**
          target: ~/backend/
          overwrite: true
          strip_components: 0

      # 3. EC2에서 서비스 배포 및 시작
      - name: Deploy and start services on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            DEPLOY_DIR=~/backend
            cd $DEPLOY_DIR

            # Build Docker image locally
            IMAGE_TAG=${{ github.sha }}
            IMAGE_NAME="artbite-backend:$IMAGE_TAG" # Using a local image name
            echo "Building Docker image: $IMAGE_NAME"
            docker build -t $IMAGE_NAME -f ./Dockerfile .

            export DOCKER_IMAGE="$IMAGE_NAME" # Export the locally built image name
            export CORS_URL="${{ secrets.CORS_URL }}"
            export SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}"
            export SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}"
            export SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}"
            export SPRING_DATASOURCE_DRIVER_CLASS_NAME="${{ secrets.SPRING_DATASOURCE_DRIVER_CLASS_NAME }}"
            export SPRING_JPA_DATABASE_PLATFORM="${{ secrets.SPRING_JPA_DATABASE_PLATFORM }}"
            export SPRING_DATA_REDIS_HOST="${{ secrets.SPRING_DATA_REDIS_HOST }}"
            export SPRING_DATA_REDIS_PORT="${{ secrets.SPRING_DATA_REDIS_PORT }}"
            export ELASTICSEARCH_VERSION="${{ secrets.ELASTICSEARCH_VERSION }}"
            export ELASTICSEARCH_PORT="${{ secrets.ELASTICSEARCH_PORT }}"
            export ELASTICSEARCH_HOST="${{ secrets.ELASTICSEARCH_HOST }}"
            export LOGSTASH_BEATS_PORT="${{ secrets.LOGSTASH_BEATS_PORT }}"
            export LOGSTASH_HTTP_PORT="${{ secrets.LOGSTASH_HTTP_PORT }}"
            export LOGSTASH_VERSION="${{ secrets.LOGSTASH_VERSION }}"
            export KIBANA_VERSION="${{ secrets.KIBANA_VERSION }}"
            export KIBANA_PORT="${{ secrets.KIBANA_PORT }}"
            export JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
            export JWT_ACCESS_TOKEN_EXPIRE_TIME="${{ secrets.JWT_ACCESS_TOKEN_EXPIRE_TIME }}"
            export JWT_REFRESH_TOKEN_EXPIRE_TIME="${{ secrets.JWT_REFRESH_TOKEN_EXPIRE_TIME }}"
            export SPRING_PROFILES_ACTIVE="prod" # Deploy with prod profile

            echo "Stopping all services..."
            chmod +x ./infra/scripts/stop.sh
            sudo ./infra/scripts/stop.sh
            
            echo "Starting services with start.sh..."
            chmod +x ./infra/scripts/start.sh
            sudo ./infra/scripts/start.sh
            
            echo "Waiting for application to be healthy..."
            HEALTH_CHECK_URL="http://localhost:8080/actuator/health"
            MAX_RETRIES=10
            RETRY_INTERVAL=10
            
            for i in $(seq 1 $MAX_RETRIES); do
              HEALTH_STATUS=$(curl -s -o /dev/null -w "%\{http_code}" $HEALTH_CHECK_URL)
              if [ "$HEALTH_STATUS" -eq 200 ]; then
                echo "Application is healthy!"
                break
              else
                echo "Application not healthy yet (status: $HEALTH_STATUS). Retrying in $RETRY_INTERVAL seconds..."
                sleep $RETRY_INTERVAL
              fi
              if [ "$i" -eq "$MAX_RETRIES" ]; then
                echo "Application did not become healthy after $MAX_RETRIES retries. Deployment failed."
                exit 1
              fi
            done
            
            echo "Cleaning up unused Docker images..."
            docker image prune -af
            
            echo "Deployment completed!"

